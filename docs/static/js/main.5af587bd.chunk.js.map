{"version":3,"sources":["components/ImageInput .js","App.js","reportWebVitals.js","index.js"],"names":["ImageInput","percentage","value","upLoadImage","loading","Span","styled","span","Grommet","Header","background","as","Box","pad","align","basis","border","color","size","direction","FileInput","name","onChange","CloudUpload","height","width","Spinner","Image","fit","src","Meter","values","label","aria-label","max","round","alignSelf","App","useState","undefined","image","setImage","setLoading","setPercentage","e","a","files","target","data","FormData","append","axios","post","headers","onUploadProgress","console","log","Math","loaded","total","res","secure_url","alignContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TA+EeA,EAvEI,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,WAAYC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAI9CC,EAAOC,UAAOC,KAAV,4EAOV,OACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAQC,WAAW,QAAQC,GAAG,SAA9B,SACE,cAACC,EAAA,EAAD,CAAKC,IAAI,SAAT,SACE,iDAGJ,eAACD,EAAA,EAAD,CAAKE,MAAM,SAASJ,WAAW,YAAYG,IAAI,SAASE,MAAM,QAA9D,UACE,eAACH,EAAA,EAAD,CACEC,IAAI,SACJG,OAAQ,CACNC,MAAO,QACPC,KAAM,SAERC,UAAU,MACVL,MAAM,UAPR,UAUE,cAACM,EAAA,EAAD,CACEC,KAAK,OACLC,SAAUnB,IAEZ,cAACE,EAAD,UAAM,cAACkB,EAAA,EAAD,CAAaN,MAAM,QAAQC,KAAK,eAGxC,cAACN,EAAA,EAAD,CAAKY,OAAO,QAAQC,MAAM,QAAQZ,IAAI,SAASC,MAAM,SAArD,SAEIV,EACE,cAACsB,EAAA,EAAD,CACET,MAAM,QACNC,KAAK,SAGP,cAACS,EAAA,EAAD,CACEC,IAAI,QACJC,IAAK3B,MAOb,cAAC4B,EAAA,EAAD,CACEC,OAAQ,CAAC,CACP7B,MAAOD,EACP+B,MAAO,QACPf,MAAO,UAETgB,aAAW,QACXvB,WAAY,CAAEO,MAAO,WACrBiB,IAAI,MACJjB,MAAM,SACNkB,OAAO,EACPC,UAAU,kB,iBCpBLC,MA5Cf,WAEE,MAA0BC,wBAASC,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BH,oBAAS,GAAvC,mBAAOlC,EAAP,KAAgBsC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOrC,EAAP,KAAmB0C,EAAnB,KAIMxC,EAAW,uCAAG,WAAOyC,GAAP,mBAAAC,EAAA,6DACZC,EAAQF,EAAEG,OAAOD,OACjBE,EAAO,IAAIC,UACZC,OAAO,OAAQJ,EAAM,IAC1BE,EAAKE,OAAO,gBAAiB,iBAC7BR,GAAW,GACXC,EAAc,GANI,SAQAQ,IAAMC,KACtB,2DACAJ,EACA,CACEK,QAAS,CACP,eAAgB,uBAElBC,iBAJF,SAImBV,GACfW,QAAQC,IAAIC,KAAKtB,MAAkB,IAAXS,EAAEc,OAAgBd,EAAEe,QAC5ChB,EAAcc,KAAKtB,MAAkB,IAAXS,EAAEc,OAAgBd,EAAEe,WAjBlC,OAQZC,EARY,OAuBlBnB,EAASmB,EAAIZ,KAAKa,YAClBnB,GAAW,GAxBO,4CAAH,sDA0BjB,OACE,cAAC9B,EAAA,EAAD,CAAKE,MAAM,SAASgD,aAAa,SAASjD,IAAI,QAA9C,SAEE,cAAC,EAAD,CAAYX,MAAOsC,EAAOrC,YAAaA,EAAaF,WAAYA,EAAYG,QAASA,OCjC5E2D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5af587bd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { Grommet, Box, Meter, FileInput, Image, Header, Spinner } from 'grommet'\r\nimport { CloudUpload } from 'grommet-icons'\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nconst ImageInput = ({ percentage, value, upLoadImage, loading }) => {\r\n\r\n\r\n\r\n  const Span = styled.span`\r\n    margin: 0 0 0 1rem;\r\n    cursor:pointer;\r\n  `\r\n\r\n\r\n\r\n  return (\r\n    <Grommet >\r\n      <Header background=\"brand\" as=\"header\" >\r\n        <Box pad=\"medium\">\r\n          <h1>Image Cloud</h1>\r\n        </Box>\r\n      </Header>\r\n      <Box align=\"center\" background=\"neutral-2\" pad=\"medium\" basis=\"small\">\r\n        <Box\r\n          pad=\"medium\"\r\n          border={{\r\n            color: \"white\",\r\n            size: \"small\"\r\n          }}\r\n          direction=\"row\"\r\n          align=\"stretch\"\r\n        >\r\n\r\n          <FileInput\r\n            name=\"file\"\r\n            onChange={upLoadImage}\r\n          />\r\n          <Span><CloudUpload color='white' size='large' /></Span>\r\n        </Box>\r\n\r\n        <Box height=\"small\" width=\"small\" pad=\"medium\" align=\"center\">\r\n          {\r\n            loading ? (\r\n              <Spinner\r\n                color=\"brand\"\r\n                size=\"1rem\"\r\n              />\r\n            ) : (\r\n              <Image\r\n                fit=\"cover\"\r\n                src={value}\r\n              />\r\n            )\r\n          }\r\n\r\n\r\n        </Box>\r\n        <Meter\r\n          values={[{\r\n            value: percentage,\r\n            label: 'white',\r\n            color: 'brand',\r\n          }]}\r\n          aria-label=\"meter\"\r\n          background={{ color: \"light-2\" }}\r\n          max=\"100\"\r\n          color=\"dark-1\"\r\n          round={true}\r\n          alignSelf=\"center\"\r\n        />\r\n      </Box>\r\n    </Grommet>\r\n  )\r\n}\r\n\r\nexport default ImageInput\r\n","import React, { useState } from 'react';\nimport { Box } from \"grommet\";\nimport ImageInput from \"./components/ImageInput \";\nimport axios from 'axios'\n\n\n\n\nfunction App() {\n\n  const [image, setImage] = useState(undefined)\n  const [loading, setLoading] = useState(false)\n  const [percentage, setPercentage] = useState(0)\n\n\n\n  const upLoadImage = async (e) => {\n    const files = e.target.files\n    const data = new FormData()\n    data.append('file', files[0])\n    data.append('upload_preset', 'yoaninterview')\n    setLoading(true)\n    setPercentage(0)\n\n    const res = await axios.post(\n      '\thttps://api.cloudinary.com/v1_1/dxrdytbzb/image/upload',\n      data,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        onUploadProgress(e) {\n          console.log(Math.round((e.loaded * 100) / e.total))\n          setPercentage(Math.round((e.loaded * 100) / e.total))\n        }\n      }\n\n    )\n\n    setImage(res.data.secure_url)\n    setLoading(false)\n  }\n  return (\n    <Box align=\"center\" alignContent=\"center\" pad=\"large\">\n\n      <ImageInput value={image} upLoadImage={upLoadImage} percentage={percentage} loading={loading} />\n\n\n    </Box>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}